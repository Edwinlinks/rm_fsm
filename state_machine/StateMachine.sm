
%start StateMachineMap::Idle
%class StateMachine
%header rm_fsm/StateMachine.h

%map StateMachineMap
%%

// Syntax:
//
// State {
//  TransitionEvent
//      [guard]
//      NextState
//      {Action}
// }

Idle
{
    dbusUpdate(data_dbus_: rm_msgs::DbusData)
        [ ctxt.getCalibrateStatus() == false ]
        Calibrate
        {
            initCalibrate();
        }
    dbusUpdate(data_dbus_: rm_msgs::DbusData)
        [ ctxt.isRaw(data_dbus_) == true ]
        Raw
        {
            initRaw();
        }
    refereeUpdate(referee_: rm_msgs::Referee)
        [ ctxt.isStandby(referee_) == true ]
        Standby
        {
            initStandby();
        }
    refereeUpdate(referee_: rm_msgs::Referee)
        [ ctxt.isCruise(referee_) == true ]
        Cruise
        {
            initCruise();
        }
    dbusUpdate(data_dbus_: rm_msgs::DbusData)
        nil {}
}

Raw
    Entry {
            rawChassis();
    }
{
    dbusUpdate(data_dbus_: rm_msgs::DbusData)
        [ ctxt.isCalibrate(data_dbus_) == true ]
        Calibrate
        {
            initCalibrate();
        }
    refereeUpdate(referee_: rm_msgs::Referee)
        [ ctxt.isStandby(referee_) == true ]
        Standby
        {
            initStandby();
        }
    refereeUpdate(referee_: rm_msgs::Referee)
        [ ctxt.isCruise(referee_) == true ]
        Cruise
        {
            initCruise();
        }
    dbusUpdate(data_dbus_: rm_msgs::DbusData)
        nil
        {
            sendRawCommand(ros::Time::now());
        }
}

Calibrate
    Entry {
        calibrateChassis();
    }
{
    refereeUpdate(referee_: rm_msgs::Referee)
        [ ctxt.isStandby(referee_) == true ]
        Standby
        {
            initStandby();
        }
    refereeUpdate(referee_: rm_msgs::Referee)
        [ ctxt.isCruise(referee_) == true ]
        Cruise
        {
            initCruise();
        }
    dbusUpdate(data_dbus_: rm_msgs::DbusData)
        [ ctxt.isRaw(data_dbus_) == true ]
        Raw
        {
            initRaw();
        }
    dbusUpdate(data_dbus_: rm_msgs::DbusData)
        nil { sendCalibrateCommand(ros::Time::now()); }
}

Standby
    Entry {
            standbyChassis();
    }
{
    refereeUpdate(referee_: rm_msgs::Referee)
        [ ctxt.isCruise(referee_) == true ]
        Cruise
        {
            initCruise();
        }
    dbusUpdate(data_dbus_: rm_msgs::DbusData)
        [ ctxt.isRaw(data_dbus_) == true ]
        Raw
        {
            initRaw();
        }
    dbusUpdate(data_dbus_: rm_msgs::DbusData)
        nil { sendStandbyCommand(ros::Time::now()); }
    refereeUpdate(referee_: rm_msgs::Referee)
        nil { sendStandbyCommand(ros::Time::now()); }
}

Cruise
    Entry {
            cruiseChassis();
    }
{
    refereeUpdate(referee_: rm_msgs::Referee)
        [ ctxt.isStandby(referee_) == true ]
        Standby
        {
            initStandby();
        }
    dbusUpdate(data_dbus_: rm_msgs::DbusData)
        [ ctxt.isRaw(data_dbus_) == true ]
        Raw
        {
            initRaw();
        }
    dbusUpdate(data_dbus_: rm_msgs::DbusData)
        nil { sendCruiseCommand(ros::Time::now()); }
    refereeUpdate(referee_: rm_msgs::Referee)
        nil { sendCruiseCommand(ros::Time::now()); }
}

Default
{
}

%%
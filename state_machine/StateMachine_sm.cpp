//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : StateMachine.sm
//

#include "rm_fsm/StateMachine.h"
#include "/home/luotinkai/ros_ws/src/rm_software/rm_fsm/state_machine/StateMachine_sm.h"

using namespace statemap;

// Static class declarations.
StateMachineMap_Idle StateMachineMap::Idle("StateMachineMap::Idle", 0);
StateMachineMap_Raw StateMachineMap::Raw("StateMachineMap::Raw", 1);
StateMachineMap_Cruise StateMachineMap::Cruise("StateMachineMap::Cruise", 2);

void StateMachineState::dbusUpdate(StateMachineContext& context, rm_msgs::DbusData data_dbus_)
{
    Default(context);
}

void StateMachineState::radarUpdate(StateMachineContext& context)
{
    Default(context);
}

void StateMachineState::Default(StateMachineContext& context)
{
    throw (
        TransitionUndefinedException(
            (context.getState()).getName(),
            context.getTransition()));

}

void StateMachineMap_Idle::dbusUpdate(StateMachineContext& context, rm_msgs::DbusData data_dbus_)
{
    StateMachine& ctxt = context.getOwner();

    if ( ctxt.isCruise(data_dbus_) == true )
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.initCruise();
            context.setState(StateMachineMap::Cruise);
        }
        catch (...)
        {
            context.setState(StateMachineMap::Cruise);
            throw;
        }
        context.getState().Entry(context);
    }
    else if ( ctxt.isRaw(data_dbus_) == true )

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.initRaw();
            context.setState(StateMachineMap::Raw);
        }
        catch (...)
        {
            context.setState(StateMachineMap::Raw);
            throw;
        }
        context.getState().Entry(context);
    }

}

void StateMachineMap_Raw::Entry(StateMachineContext& context)

{
    StateMachine& ctxt = context.getOwner();

    ctxt.rawChassis();
}

void StateMachineMap_Raw::dbusUpdate(StateMachineContext& context, rm_msgs::DbusData data_dbus_)
{
    StateMachine& ctxt = context.getOwner();

    if ( ctxt.isCruise(data_dbus_) == true )
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.initCruise();
            context.setState(StateMachineMap::Cruise);
        }
        catch (...)
        {
            context.setState(StateMachineMap::Cruise);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
        StateMachineState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.sendRawCommand(ros::Time::now());
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }

}

void StateMachineMap_Cruise::Entry(StateMachineContext& context)

{
    StateMachine& ctxt = context.getOwner();

    ctxt.cruiseChassis();
}

void StateMachineMap_Cruise::dbusUpdate(StateMachineContext& context, rm_msgs::DbusData data_dbus_)
{
    StateMachine& ctxt = context.getOwner();

    if ( ctxt.isRaw(data_dbus_) == true )
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.initRaw();
            context.setState(StateMachineMap::Raw);
        }
        catch (...)
        {
            context.setState(StateMachineMap::Raw);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
        StateMachineState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.sendCruiseCommand(ros::Time::now());
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }

}

void StateMachineMap_Cruise::radarUpdate(StateMachineContext& context)
{
    StateMachine& ctxt = context.getOwner();

    StateMachineState& endState = context.getState();

    context.clearState();
    try
    {
        ctxt.changeVel();
        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }


}

//
// Local variables:
//  buffer-read-only: t
// End:
//

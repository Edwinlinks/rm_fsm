//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : StateMachine.sm
//

#include "rm_fsm/StateMachine.h"
#include "/home/luotinkai/ros_ws/src/rm_software/rm_fsm/state_machine/StateMachine_sm.h"

using namespace statemap;

// Static class declarations.
StateMachineMap_Idle StateMachineMap::Idle("StateMachineMap::Idle", 0);
StateMachineMap_Raw StateMachineMap::Raw("StateMachineMap::Raw", 1);
StateMachineMap_Calibrate StateMachineMap::Calibrate("StateMachineMap::Calibrate", 2);
StateMachineMap_Standby StateMachineMap::Standby("StateMachineMap::Standby", 3);
StateMachineMap_Cruise StateMachineMap::Cruise("StateMachineMap::Cruise", 4);

void StateMachineState::dbusUpdate(StateMachineContext& context, rm_msgs::DbusData data_dbus_)
{
    Default(context);
}

void StateMachineState::refereeUpdate(StateMachineContext& context, rm_common::Referee referee_)
{
    Default(context);
}

void StateMachineState::Default(StateMachineContext& context)
{
    throw (
        TransitionUndefinedException(
            (context.getState()).getName(),
            context.getTransition()));

}

void StateMachineMap_Idle::dbusUpdate(StateMachineContext& context, rm_msgs::DbusData data_dbus_)
{
    StateMachine& ctxt = context.getOwner();

    if ( ctxt.isCalibrate(data_dbus_) == true )
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.run();
            context.setState(StateMachineMap::Calibrate);
        }
        catch (...)
        {
            context.setState(StateMachineMap::Calibrate);
            throw;
        }
        context.getState().Entry(context);
    }
    else if ( ctxt.isRaw(data_dbus_) == true )

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.run();
            if (ctxt.getCalibrateStatus() == true)
            {
                ctxt.checkCalibrateStatus();
            }
            context.setState(StateMachineMap::Raw);
        }
        catch (...)
        {
            context.setState(StateMachineMap::Raw);
            throw;
        }
        context.getState().Entry(context);
    }

}

void StateMachineMap_Raw::Entry(StateMachineContext& context)

{
    StateMachine& ctxt = context.getOwner();

    ctxt.initRaw();
}

void StateMachineMap_Raw::dbusUpdate(StateMachineContext& context, rm_msgs::DbusData data_dbus_)
{
    StateMachine& ctxt = context.getOwner();

    if ( ctxt.isCalibrate(data_dbus_) == true )
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.run();
            context.setState(StateMachineMap::Calibrate);
        }
        catch (...)
        {
            context.setState(StateMachineMap::Calibrate);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         StateMachineMap_Default::dbusUpdate(context, data_dbus_);
    }


}

void StateMachineMap_Calibrate::Entry(StateMachineContext& context)

{
    StateMachine& ctxt = context.getOwner();

    ctxt.initCalibrate();
}

void StateMachineMap_Calibrate::dbusUpdate(StateMachineContext& context, rm_msgs::DbusData data_dbus_)
{
    StateMachine& ctxt = context.getOwner();

    if ( ctxt.isRaw(data_dbus_) == true )
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.run();
            context.setState(StateMachineMap::Raw);
        }
        catch (...)
        {
            context.setState(StateMachineMap::Raw);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         StateMachineMap_Default::dbusUpdate(context, data_dbus_);
    }


}

void StateMachineMap_Calibrate::refereeUpdate(StateMachineContext& context, rm_common::Referee referee_)
{
    StateMachine& ctxt = context.getOwner();

    if ( ctxt.isStandby(referee_) == true )
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.run();
            context.setState(StateMachineMap::Standby);
        }
        catch (...)
        {
            context.setState(StateMachineMap::Standby);
            throw;
        }
        context.getState().Entry(context);
    }
    else if ( ctxt.isCruise(referee_) == true )

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.run();
            context.setState(StateMachineMap::Cruise);
        }
        catch (...)
        {
            context.setState(StateMachineMap::Cruise);
            throw;
        }
        context.getState().Entry(context);
    }    else
    {
         StateMachineMap_Default::refereeUpdate(context, referee_);
    }


}

void StateMachineMap_Standby::Entry(StateMachineContext& context)

{
    StateMachine& ctxt = context.getOwner();

    ctxt.initStandby();
}

void StateMachineMap_Standby::dbusUpdate(StateMachineContext& context, rm_msgs::DbusData data_dbus_)
{
    StateMachine& ctxt = context.getOwner();

    if ( ctxt.isRaw(data_dbus_) == true )
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.run();
            context.setState(StateMachineMap::Raw);
        }
        catch (...)
        {
            context.setState(StateMachineMap::Raw);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         StateMachineMap_Default::dbusUpdate(context, data_dbus_);
    }


}

void StateMachineMap_Standby::refereeUpdate(StateMachineContext& context, rm_common::Referee referee_)
{
    StateMachine& ctxt = context.getOwner();

    if ( ctxt.isCruise(referee_) == true )
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.run();
            context.setState(StateMachineMap::Cruise);
        }
        catch (...)
        {
            context.setState(StateMachineMap::Cruise);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         StateMachineMap_Default::refereeUpdate(context, referee_);
    }


}

void StateMachineMap_Cruise::Entry(StateMachineContext& context)

{
    StateMachine& ctxt = context.getOwner();

    ctxt.initCruise();
}

void StateMachineMap_Cruise::dbusUpdate(StateMachineContext& context, rm_msgs::DbusData data_dbus_)
{
    StateMachine& ctxt = context.getOwner();

    if ( ctxt.isRaw(data_dbus_) == true )
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.run();
            context.setState(StateMachineMap::Raw);
        }
        catch (...)
        {
            context.setState(StateMachineMap::Raw);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         StateMachineMap_Default::dbusUpdate(context, data_dbus_);
    }


}

void StateMachineMap_Cruise::refereeUpdate(StateMachineContext& context, rm_common::Referee referee_)
{
    StateMachine& ctxt = context.getOwner();

    if ( ctxt.isStandby(referee_) == true )
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.run();
            context.setState(StateMachineMap::Standby);
        }
        catch (...)
        {
            context.setState(StateMachineMap::Standby);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         StateMachineMap_Default::refereeUpdate(context, referee_);
    }


}

//
// Local variables:
//  buffer-read-only: t
// End:
//
